<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class UserLoginTable extends Doctrine_Table {

    /**
     * create new instance of userlogintable
     * @return object UserLoginTable
     */
    public static function instance() {
        return Doctrine::getTable('UserLogin');
    }


    public function updateEmail($email) {
            Doctrine_Query::create()
               ->update('UserLogin ul')
               ->set('ul.email','?',$email)
               ->execute();
    }

    /**
     * Find user by name and password
     * 
     * @param sfWebRequest $request, request with post data
     * @return Doctrine_Collection
     */
    public function findUserByNameAndPassword($username, $password) {
        return Doctrine_Query::create()
            ->select('ul.*')
            ->from('UserLogin ul')
            ->where('ul.username = ?', $username)
            ->andWhere('ul.password = ?',$password)
            ->andWhere('ul.deleted_at IS NULL')
            ->execute();
    }



    /**
     * Get total sum of users
     *
     * @return Doctrine_Collection
     */
    public function getTotalSumOfUser() {
        return Doctrine_Query::create()
                ->select('COUNT(*) AS anzahl')
                ->from('UserLogin ul')
                ->where('ul.deleted_at IS NULL')
                ->execute();
    }

    /**
     * Functions loads all users.
     *
     * @param int $limit, limit is optional paramater, when load all users without pagin, set limit -1
     * @param int $offset, offset is optional paramater, when load all users without pagin, set offset -1
     * @return Doctrine_Collection
     */
    public function getAllUser($limit, $offset) {
        $query = Doctrine_Query::create()
                ->select('ul.*')
                ->from('UserLogin ul')
                ->orderby('ul.id DESC');

        if($limit != -1 AND $offset != -1) {
            $query->limit($limit)
                  ->offset($offset);
        }
        
        return $query->where('ul.deleted_at IS NULL')
                     ->execute();
    }

    /**
     * Function deletes users. Own profile cannot be deleted.
     * $currentUserId = Session ID of logged user
     *
     * @param int $idToDelete, ID of the user to delete
     * @param int $currentUserId, ID of the logged in user....
     * @return true
     */
    public function deleteUser($idToDelete, $currentUserId) {
        Doctrine_Query::create()
            ->update('UserLogin ul')
            ->set('ul.deleted_at','?', date('Y-m-d'))
            ->where('ul.id = ?', $idToDelete)
            ->andWhere('ul.id != ?', $currentUserId)
            ->execute();
        return true;
    }




    /**
     * Loads user by username
     * @param string$username, username to load
     * @return Doctrine_Collection
     */
    public function findUserByUsername($username) {
        return Doctrine_Query::create()
            ->from('UserLogin ul')
            ->where('ul.username = ?', $username)
            ->execute();
    }

    /**
     * Find User by its id
     * @param int $id
     * @return Doctrine_Collection
     */
    public function findUserById($id) {
        return Doctrine_Query::create()
            ->select('ul.*')
            ->from('UserLogin ul')
            ->where('ul.id = ?',$id)
            ->andWhere('ul.deleted_at IS NULL')
            ->execute();
    }


    /**
     * Find User by its id
     * @param int $id
     * @return Doctrine_Collection
     */
    public function findActiveUserById($id) {
        return Doctrine_Query::create()
            ->select('ul.*')
            ->from('UserLogin ul')
            ->where('ul.id = ?',$id)
            ->execute();
    }

    /**
     * Update Userdata
     * @param array $data, Post data
     * @param int $user_id, User_id
     * @return true
     */
    public function updateUser($data, $user_id) {
        $userlogin = Doctrine_Query::create()
               ->update('UserLogin ul')
               ->set('ul.password','?',$data['userFirstTab_password'])
               ->set('ul.email','?',$data['userFirstTab_email'])
               ->where('ul.id = ?', $user_id);
        if(isset($data['userFirstTab_userrole']) AND is_numeric($data['userFirstTab_userrole'])) {
            $userlogin->set('ul.role_id','?',$data['userFirstTab_userrole']);
        }
        $userlogin->execute();
        return true;
    }



    /**
     * Function changes role for exisiting user
     * 
     * @param id $updateid, new role id
     * @param id $deleteid, old role id
     * @return Doctrine_Collection
     */
    public function changeRole($updateid, $deleteid) {
         return Doctrine_Query::create()
                ->update('UserLogin ul')
                ->set('ul.role_id','?',$updateid)
                ->where('ul.role_id = ?', $deleteid)
                ->execute();
    }

    /**
     * get total sum of user by filter
     * @param sfWebRequest $request
     * @return Doctrine_Collection
     */
    public function getTotalSumOfUserByFilter(sfWebRequest $request) {
        $query = Doctrine_Query::create()
              ->select('COUNT(*) AS anzahl')
              ->from('UserLogin ul')
              ->where('ul.deleted_at IS NULL')
              ->leftJoin('ul.UserData ud');
             
        if($request->hasParameter('username')){
            $query->andWhere('ul.username LIKE ?','%'.$request->getParameter('username').'%');
        }
        if($request->hasParameter('firstname')){
            $query->andWhere('ud.firstname LIKE ?','%'.$request->getParameter('firstname').'%');
        }
        if($request->hasParameter('lastname')){
            $query->andWhere('ud.lastname LIKE ?','%'.$request->getParameter('lastname').'%');
        }
        if($request->hasParameter('email')){
            $query->andWhere('ul.email LIKE ?','%'.$request->getParameter('email').'%');
        }

        if($request->hasParameter('userrole')){
            $query->andWhere('ul.role_id = ?',$request->getParameter('userrole'));
        }
        return $query->execute();
    }


    /**
     * Function loads user by filter
     * @param int $limit
     * @param int $offset
     * @param sfWebRequest $request
     * @return Doctrine_Collection
     */
    public function getAllUserByFilter($limit, $offset, sfWebRequest $request) {
        $query = Doctrine_Query::create()
               ->select('ul.*')
               ->from('UserLogin ul')
               ->where('ul.deleted_at IS NULL')
               ->leftJoin('ul.UserData ud');
        if($request->hasParameter('username')){
            $query->andWhere('ul.username LIKE ?','%'.$request->getParameter('username').'%');
        }
        if($request->hasParameter('firstname')){
            $query->andWhere('ud.firstname LIKE ?','%'.$request->getParameter('firstname').'%');
        }
        if($request->hasParameter('lastname')){
            $query->andWhere('ud.lastname LIKE ?','%'.$request->getParameter('lastname').'%');
        }
        if($request->hasParameter('email')){
            $query->andWhere('ul.email LIKE ?','%'.$request->getParameter('email').'%');
        }

        if($request->hasParameter('userrole')){
            $query->andWhere('ul.role_id = ?',$request->getParameter('userrole'));
        }
        
        return $query->orderby('ul.id DESC')
                ->limit($limit)
                ->offset($offset)
                ->execute();
    }


    /**
     * Load all deletes user
     * 
     * @return Doctrine_Collection
     */
    public function getDeletedUser() {
        return Doctrine_Query::create()
                ->select('ul.*')
                ->from('UserLogin ul')
                ->orderby('ul.id DESC')
                ->where('ul.deleted_at != ?', '')
                ->execute();
    }

    /**
     * Activate a user, when he was deleted
     * @param int $user_id, userid to activate
     * @return true
     */
    public function activateUserById($user_id) {
        Doctrine_Query::create()
            ->update('UserLogin ul')
            ->set('ul.deleted_at', 'null')
            ->where('ul.id = ?', $user_id)
            ->execute();
        return true;
    }


    /**
     * load all users, which have right to send circulation
     * @return Doctrine_Collection
     */
    public function getAllSenderUser() {
        return Doctrine_Query::create()
               ->select('ul.id, CONCAT(ud.firstname,\' \',ud.lastname) AS name')
               ->from('UserLogin ul')
               ->leftJoin('ul.UserData ud')
               ->leftJoin('ul.Role r')
               ->leftJoin('r.CredentialRole cr')
               ->where('cr.credential_id = ?', 21)
               ->groupBy('ul.id')
               ->execute();
    }
}