<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class WorkflowProcessUserTable extends Doctrine_Table {


    /**
     *
     * create new instance of AdditionalText
     * @return object UserLoginTable
     */
    public static function instance() {
        return Doctrine::getTable('WorkflowProcessUser');
    }

    
    public function skipStation($id) {
         return Doctrine_Query::create()
                ->update('WorkflowProcessUser wpu')
                ->set('wpu.dateofdecission','?',time())
                ->set('wpu.decissionstate', '?', 'SKIPPED')
                ->where('wpu.id = ?', $id)
                ->execute();

    }

    public function skipAllStation($id) {
         return Doctrine_Query::create()
                ->update('WorkflowProcessUser wpu')
                ->set('wpu.dateofdecission','?',time())
                ->set('wpu.decissionstate', '?', 'SKIPPED')
                ->where('wpu.workflowslotuser_id = ?', $id)
                ->execute();

    }

    public function getProcessUserByWorkflowSlotUserId($id) {
        return Doctrine_Query::create()
            ->select('wpu.*')
            ->from('WorkflowProcessUser wpu')
            ->where('wpu.workflowslotuser_id = ?', $id)
            ->orderBy('wpu.id ASC')
            ->execute();
    }


    public function getProcessById($id) {
        return Doctrine_Query::create()
            ->select('wpu.*')
            ->from('WorkflowProcessUser wpu')
            ->where('wpu.id = ?', $id)
            ->execute();
    }


    public function getProcessAndSubstituteProcessByProcessId($id) {
        return Doctrine_Query::create()
            ->select('wfpu.*')
            ->from('WorkflowProcessUser wfpu')
            ->where('wfpu.id = ?', $id)
            ->orWhere('wfpu.isuseragentof = ?', $id)
            ->orderBy('wfpu.id ASC')
            ->execute();
    }

    /**
     * Set a Process to useragent set
     *
     * @param int $id, id of the process
     * @return true
     */
    public function setProcessToUseragentSet($id) {
        Doctrine_Query::create()
            ->update('WorkflowProcessUser wpu')
            ->set('wpu.decissionstate','?','USERAGENTSET')
            ->set('wpu.dateofdecission','?', time())
            ->where('wpu.id = ?', $id)
            ->execute();
        return true;
        
    }

    public function getWaitingProcess() {
        return Doctrine_Query::create()
            ->select('wfpu.*')
            ->from('WorkflowProcessUser wfpu')
            ->leftJoin('wfpu.WorkflowProcess wfp')
            ->where('wfpu.decissionstate = ?', 'WAITING')
            ->execute();
    }


    public function getWaitingStationToStopByUser($version_id) {
        return Doctrine_Query::create()
            ->select('wfpu.*')
            ->from('WorkflowProcessUser wfpu')
            ->leftJoin('wfpu.WorkflowProcess wfp')
            ->where('wfp.workflowversion_id = ?' ,$version_id)
            ->andWhere('wfpu.decissionstate = ?', 'WAITING')
            ->execute();
    }


    public function getWorkflowProcessUserByWorklflowProcessId($wfId) {
        return Doctrine_Query::create()
            ->select('wfpu.*')
            ->from('WorkflowProcessUser wfpu')
            ->where('wfpu.workflowprocess_id = ?' ,$wfId)
            ->execute();
    }


    public function getWaitingStation($workflowslot_id, $user_id) {
        return Doctrine_Query::create()
            ->select('wfpu.*')
            ->from('WorkflowProcessUser wfpu')
            ->leftJoin('wfpu.WorkflowProcess wfp')
            ->where('wfp.workflowslot_id = ?', $workflowslot_id)
            ->andWhere('wfpu.decissionstate = ?', 'WAITING')
            ->andWhere('wfpu.user_id = ?',$user_id)
            ->execute();
    }






    public function deleteWorkflowProcessUserByWorkfloSlotUserId($workflowslotuser_id) {
        Doctrine_Query::create()
            ->delete('WorkflowProcessUser')
            ->from('WorkflowProcessUser wfpu')
            ->where('wfpu.workflowslotuser_id = ?', $workflowslotuser_id)
            ->execute();
        return true;
        
    }




    public function getActiveProcessUserForWorkflowSlot($workflowslot_id, $user_id) {
        return Doctrine_Query::create()
            ->select('wpu.*')
            ->from('WorkflowProcessUser wpu')
            ->leftJoin('wpu.WorkflowProcess wp')
            ->where('wpu.decissionstate = ?','WAITING')
            ->andWhere('wpu.user_id = ?', $user_id)
            ->andWhere('wp.workflowslot_id = ?', $workflowslot_id)
            ->orderBy('wpu.id ASC')
            ->execute();
    }


    public function getWaitingStationByVersionId($version_id) {
        return Doctrine_Query::create()
            ->select('DISTINCT wfpu.user_id, wfpu.id')
            ->from('WorkflowProcessUser wfpu')
            ->leftJoin('wfpu.WorkflowProcess wfp')
            ->where('wfp.workflowversion_id = ?' ,$version_id)
            ->andWhere('wfpu.decissionstate = ?', 'WAITING')
            ->orderBy('wfpu.user_id ASC')
            ->execute();
    }


    public function setProcessToUseragentSetByCronjob($id) {
        Doctrine_Query::create()
            ->update('WorkflowProcessUser wpu')
            ->set('wpu.decissionstate','?','USERAGENTSET')
            ->set('wpu.dateofdecission','?', time())
            ->set('wpu.useragentsetbycronjob','?', 1)
            ->where('wpu.id = ?', $id)
            ->execute();
        return true;

    }


    public function setProcessToUseragentSetByCronjobAndByProcessId($processId, $flag) {
        $query = Doctrine_Query::create()
            ->update('WorkflowProcessUser wpu')
            ->set('wpu.decissionstate','?','USERAGENTSET')
            ->set('wpu.dateofdecission','?', time())
            ->where('wpu.workflowprocess_id = ?', $processId)
            ->andWhere('wpu.useragentsetbycronjob = ?',$flag)
            ->execute();
        return true;
    }
    

}